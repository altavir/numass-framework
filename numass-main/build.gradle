plugins {
    id 'groovy'
    id 'application'
}

apply plugin: 'kotlin'

//if (!hasProperty('mainClass')) {
//    ext.mainClass = 'inr.numass.LaunchGrindShell'
//}
mainClassName = 'inr.numass.LaunchGrindShell'

description = "Main numass project"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileGroovy.dependsOn(compileKotlin)
compileGroovy.classpath += files(compileKotlin.destinationDir)

dependencies {
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.+'
    implementation group: 'commons-io', name: 'commons-io', version: '2.+'
    implementation project(':numass-core')
    implementation "hep.dataforge:dataforge-minuit" //project(':dataforge-stat:dataforge-minuit')
    implementation "hep.dataforge:grind-terminal" //project(':dataforge-grind:grind-terminal')
    implementation "hep.dataforge:dataforge-gui"
    //implementation "hep.dataforge:dataforge-html"

    // https://mvnrepository.com/artifact/org.ehcache/ehcache
    //implementation group: 'org.ehcache', name: 'ehcache', version: '3.4.0'

}

task repl(dependsOn: classes, type: JavaExec) {
    group "numass"
    main 'inr.numass.LaunchGrindShell'
    classpath = sourceSets.main.runtimeClasspath
    description "Start Grind repl"
    standardInput = System.in
    standardOutput = System.out
    if (project.hasProperty("cmd")) {
        args = cmd.split().toList()
    }
}

task grindTask(dependsOn: classes, type: JavaExec) {
    group "numass"
    main 'inr.numass.RunTask'
    classpath = sourceSets.main.runtimeClasspath
    description "Run a task in a numass workspace"
    standardInput = System.in
    standardOutput = System.out
}

task simulate(dependsOn: classes, type: JavaExec) {
    group "numass"
    main 'inr.numass.scripts.Simulate'
    classpath = sourceSets.main.runtimeClasspath
    description "Simulate spectrum"
}

task underflow(dependsOn: classes, type: JavaExec) {
    group "numass"
    main 'inr.numass.scripts.underflow.Underflow'
    classpath = sourceSets.main.runtimeClasspath
}

task scanTreeStartScript(type: CreateStartScripts, dependsOn: installDist) {
    applicationName = 'scanTree'
    classpath = fileTree('build/install/numass-main/lib')
    mainClassName = 'inr.numass.scripts.ScanTreeKt'
    outputDir = file('build/install/numass-main/bin')
}